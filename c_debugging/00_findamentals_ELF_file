Reference:
            https://www.opensourceforu.com/2020/02/understanding-elf-the-executable-and-linkable-format/


# Steps to Explore the ELF file

## 1 Compilations Steps:

The four main steps for compilation and getting the final exe files are:

    - Pre-processing

    - Compiling (assembly file creation)

    - Assembler (object file creation)

    - Linking (links all object files to create an executable)


```
gcc elf_exploring.c -o elf_exploring
```

Now, the gcc compiler created the final exe file (or elf file). We can explore it by:
```
file elf_exploring
```
The output of above command is:
" ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),  ..... "

### 1-1 Pre-processing
This is the 1st stage of compilation. The following 4 steps will be done:

    - Removal of comments from source code

    - Expanding #include files

    - Macro expansion

    - Conditional compilation

The following command can get us to the pre-processed file (1st stage of compilation):
```
gcc -E elf_exploring.c -o elf_exploring.i
```

If we look at the elf_exploring.i, this is huge file for a simple sample code we are exploring here.
In this compilation stage, any line that starts with # is interpreted as a pre-processing command. These 
commands have their own language format.

### 1-2 Compilation
Here we convert the pre-processed code in 1-1 section above into Assembly code/instruction. This assembly code is
native to the local/target processor/CPU architecture.

To create XX.s file (assemble version of our code):
```
gcc -S elf_exploring.c -fverbose-asm -o elf_exploring.s
```

### 1-3 Assembling
Here we want to convert the assmbly code (we got in section 1-2 above) into the machine code (or object code).
The output is object file (XX.o), and has the file format of ELF. This cannot be executed directly and must be 
linked using linker, which is the final stage of compilation (section 1-4 below).

XX.o is a binary file and cannot be viewed/opened as is.

### 1-4 Linking
This is last stage of compilation. For a better understanding, it will be explained in the next step in details.


## 2 Last stage of Comilation (Linkage)

### 2-1 Reading the object file (XX.o)
In the previous section, we could not visualize the XX.o file, we could not open it.
To be ale see the XX.o (which is a ELF file), we can use the following command:

```
readelf -h elf_exploring.o
```
Which output the following:
```
    ELF Header:
        Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
        Class:                             ELF64
        Data:                              2's complement, little endian
        Version:                           1 (current)
        OS/ABI:                            UNIX - System V
        ABI Version:                       0
        Type:                              REL (Relocatable file)
        Machine:                           Advanced Micro Devices X86-64
        Version:                           0x1
        Entry point address:               0x0
        Start of program headers:          0 (bytes into file)
        Start of section headers:          760 (bytes into file)
        Flags:                             0x0
        Size of this header:               64 (bytes)
        Size of program headers:           0 (bytes)
        Number of program headers:         0
        Size of section headers:           64 (bytes)
        Number of section headers:         13
        Section header string table index: 12
```

## 2-2 Different section in a binary executable file
Whena code is compiledd and a binary executable is generated, several groups are created, each of which has certain info:

    - Binary executable code: Will be in the ".text" of the ELF file
    
    - Code for initialised variables: Will be in the ".data" section of the ELF file
    
    - Code for uninitialised variables: Will be in the ".bss" section of the ELF file
    
    - Constant strings
    
    - Information about the variable and function names used in the program
    
    - Debugging information

To see the various sections of info noted abov, we can use the following command:
```
readelf -S elf_exploring.o
```

And if we are intrested only the binray executable in the ",txt" section of the ELF file:
```
objdump -d elf_exploring.o
```

Which outputs:

```
elf_exploring.o:     file format elf64-x86-64
Disassembly of section .text:
0000000000000000 <main>:
   0:   55                      push   %rbp
   1:   48 89 e5                mov    %rsp,%rbp
   4:   48 83 ec 10             sub    $0x10,%rsp
   8:   c7 45 f4 01 00 00 00    movl   $0x1,-0xc(%rbp)
   f:   c7 45 f8 02 00 00 00    movl   $0x2,-0x8(%rbp)
  16:   8b 55 f4                mov    -0xc(%rbp),%edx
  19:   8b 45 f8                mov    -0x8(%rbp),%eax
  1c:   01 d0                   add    %edx,%eax
  1e:   89 45 fc                mov    %eax,-0x4(%rbp)
  21:   8b 45 fc                mov    -0x4(%rbp),%eax
  24:   89 c6                   mov    %eax,%esi
  26:   48 8d 3d 00 00 00 00    lea    0x0(%rip),%rdi        # 2d <main+0x2d>
  2d:   b8 00 00 00 00          mov    $0x0,%eax
  32:   e8 00 00 00 00          callq  37 <main+0x37>
  37:   b8 00 00 00 00          mov    $0x0,%eax
  3c:   c9                      leaveq
  3d:   c3                      retq
```

## 2-3 Linker
So how does the compiler come to know where to put each section (.data, .text, .bss, ...) in the final ELF. This is where the 
linker comes in. Linkers use a file known as the linker descriptor file. This contains information about all the memory in the 
target machine (Flash, RAM, QSPI, SDRAM, etc) with its starting address and size. It also contains information about the different 
sections that should be present in the final ELF file and where each section should be loaded in the target machine. The following 
is a simple linker descriptor file:

```
MEMORY
{
FLASH (rx) : ORIGIN = 0x0, LENGTH = 0x020
RAM (rwx) : ORIGIN = 0xA0, LENGTH = 0x00A0000 /* 640K */
}
 
ENTRY(Reset_Handler)
 
SECTIONS
{
. = 0x0000;
.text : { *(.text) }
. = 0xA0;
.data : { *(.data) }
.bss : { *(.bss) }
}
```

The above linker script file informs linker about the following:

    - The system has two memories â€” Flash and RAM.

    - Put all executable code that is present in the .text section at the address 0x00000 in the target machine.

    - Put all data (.data and .bss) starting at address 0xA0.


![elf_linker](./img/ELF_linker.png)



